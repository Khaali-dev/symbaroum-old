The structure for the combatMods rule engine used in symbaroum is as follows:
combat {
    initiative: [
        {
            label : "the label",
            id : "the id",
            attribute : "initiative attribute",
            modifier: int // value to modify existing initiative
        }
    ]
    weapons: [
        weaponid : {
            weaponmodifiers {
                specialEffects [
                    stringvalue // currently only SPECIAL_MASSIVE
                ]
                attributes [
                    {
                        label : "the label of the modifier",
                        id : "the id",
                        attribute : "the preferred attack attribute",
                    }
                ]
                attackModifiers [
                    {
                        label : "the label of the modifier",
                        id : "the id",
                        modifier : "+mod" // as per roll formula
                    }
                ],
                attackIncrease [
                    {
                        label : "the label of the modifier",
                        id : "the id",
                        modifier : "+mod" // the number of additional attacks
                    }

                ],
                damageChoices [
                    {
                        label : "the label of the modifier",
                        id : "the id",
                        type : "check","fixed", "radio","upgrade", "builtin" // builtin is for those that EC assumes are already calculated
                        // fixed & check assumes only one single alternative. If there is more than one alternative, add multiple damageChoices
                        diceUpgrade : int, // only when upgrade - num sides upgrade (min 2)
                        defaultSelect : "alternatives index", // only for radio = select id is the partialDamageFormula
                        alternatives : [ // radio / check / fixed - most beneficial one last
                            {
                                label : "the label of this modifier",
                                damageMod : "partialDamageFormula" // check & fixed & builtin - Partial damage formula in PC format as default
                                damageModNPC : "", // Partial Damage in NPC format assuming restrictions are fullfilled (for all types)
                                restrictions = [ // any restrictions
                                    "1st-attack", // Only applicable on first attack
                                    "active", // Can only be used when performing 1 attack
                                    "advantage", // Can only be used when at advantage
                                    ("[attack-attribute]", // Only applies when attack is made with this attribute) // Not sure I can support - might require double loop
                                ]
                            }
                            { ... next option ...] }
                        },
                    }
                ]
            }
        }
    ]
}


This allows a module to do - where :
CONFIG.Item.documentClass.prototype["getCombatModifierAcidicattack"] = function(combatMods,armor, weapon) { console.log("THIS IS A SAMPLE ",this.name); }


EC specific handling
ironfist
robust
marksman
polearmmastery
shieldfighter
twohandedforce
naturalweapon
naturalwarrior
colossal
dominate
feint
knifeplay
sixthsense
tactician